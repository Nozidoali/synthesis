#include "contest_rewrite.h"


using namespace std;


static unsigned short s_RwtAigSubgraphs_Limit2[] =
{
    0x0008,0x0002, 0x000A,0x0002, 0x0008,0x0003, 0x0009,0x0002, 0x000C,0x0002,
    0x000E,0x0002, 0x000C,0x0003, 0x000D,0x0002, 0x000C,0x0004, 0x000E,0x0004,
    0x000C,0x0005, 0x000D,0x0004, 0x0010,0x0002, 0x0012,0x0002, 0x0010,0x0003,
    0x0011,0x0002, 0x0010,0x0004, 0x0012,0x0004, 0x0010,0x0005, 0x0011,0x0004,
    0x0010,0x0006, 0x0012,0x0006, 0x0010,0x0007, 0x0011,0x0006, 0x0016,0x0003,
    0x0016,0x0005, 0x0014,0x0006, 0x0016,0x0006, 0x0014,0x0007, 0x0016,0x0007,
    0x0015,0x0006, 0x0014,0x0008, 0x0016,0x0008, 0x0014,0x0009, 0x0016,0x0009,
    0x0015,0x0008, 0x001A,0x0005, 0x0019,0x0004, 0x0018,0x0006, 0x001A,0x0006,
    0x0018,0x0007, 0x001A,0x0007, 0x0019,0x0006, 0x0018,0x0008, 0x001A,0x0008,
    0x0018,0x0009, 0x001A,0x0009, 0x0019,0x0008, 0x001E,0x0003, 0x001D,0x0002,
    0x001E,0x0005, 0x001E,0x0006, 0x001C,0x0007, 0x001E,0x0007, 0x001D,0x0006,
    0x001C,0x0008, 0x001E,0x0008, 0x001C,0x0009, 0x001E,0x0009, 0x001D,0x0008,
    0x0020,0x0006, 0x0022,0x0006, 0x0020,0x0007, 0x0022,0x0007, 0x0021,0x0006,
    0x0020,0x0008, 0x0022,0x0008, 0x0020,0x0009, 0x0022,0x0009, 0x0021,0x0008,
    0x0026,0x0003, 0x0024,0x0004, 0x0026,0x0004, 0x0024,0x0005, 0x0026,0x0005,
    0x0025,0x0004, 0x0026,0x0007, 0x0024,0x0008, 0x0026,0x0008, 0x0024,0x0009,
    0x0026,0x0009, 0x0025,0x0008, 0x0025,0x000A, 0x0025,0x000C, 0x0025,0x000E,
    0x0028,0x0004, 0x002A,0x0004, 0x0028,0x0005, 0x002A,0x0005, 0x0029,0x0004,
    0x002A,0x0007, 0x0029,0x0006, 0x002A,0x0008, 0x0028,0x0009, 0x002A,0x0009,
    0x0029,0x0008, 0x0029,0x000A, 0x0029,0x000C, 0x0029,0x000E, 0x002A,0x0010,
    0x002E,0x0003, 0x002D,0x0002, 0x002E,0x0004, 0x002C,0x0005, 0x002E,0x0005,
    0x002D,0x0004, 0x002E,0x0007, 0x002C,0x0008, 0x002E,0x0008, 0x002C,0x0009,
    0x002E,0x0009, 0x002D,0x0008, 0x002D,0x000A, 0x002D,0x000C, 0x002D,0x000E,
    0x0030,0x0004, 0x0030,0x0005, 0x0032,0x0005, 0x0031,0x0004, 0x0030,0x0008,
    0x0032,0x0008, 0x0030,0x0009, 0x0032,0x0009, 0x0031,0x0008, 0x0030,0x000B,
    0x0031,0x000E, 0x0032,0x0010, 0x0030,0x0011, 0x0034,0x0002, 0x0036,0x0002,
    0x0036,0x0003, 0x0036,0x0005, 0x0036,0x0007, 0x0034,0x0008, 0x0036,0x0008,
    0x0034,0x0009, 0x0036,0x0009, 0x0035,0x0008, 0x0038,0x0002, 0x003A,0x0002,
    0x0038,0x0003, 0x003A,0x0003, 0x0039,0x0002, 0x003A,0x0005, 0x003A,0x0007,
    0x0039,0x0006, 0x0038,0x0008, 0x003A,0x0008, 0x0038,0x0009, 0x003A,0x0009,
    0x0039,0x0008, 0x0039,0x000C, 0x0039,0x0016, 0x003A,0x0018, 0x0039,0x0018,
    0x003C,0x0002, 0x003C,0x0003, 0x003E,0x0003, 0x003E,0x0005, 0x003D,0x0004,
    0x003E,0x0007, 0x003C,0x0009, 0x003E,0x0009, 0x003D,0x0008, 0x003D,0x000E,
    0x003D,0x0010, 0x003D,0x0014, 0x0040,0x0002, 0x0040,0x0003, 0x0042,0x0003,
    0x0041,0x0002, 0x0040,0x0008, 0x0042,0x0008, 0x0040,0x0009, 0x0042,0x0009,
    0x0041,0x0008, 0x0040,0x000B, 0x0041,0x000C, 0x0040,0x000F, 0x0040,0x0010,
    0x0040,0x0011, 0x0040,0x0015, 0x0040,0x0018, 0x0040,0x0019, 0x0044,0x0004,
    0x0046,0x0004, 0x0046,0x0005, 0x0044,0x0006, 0x0046,0x0007, 0x0046,0x0009,
    0x0045,0x000A, 0x0045,0x000E, 0x0045,0x0012, 0x0045,0x0016, 0x0045,0x0018,
    0x0046,0x001A, 0x0045,0x001A, 0x0046,0x001C, 0x0046,0x001E, 0x0044,0x001F,
    0x0045,0x001E, 0x0046,0x0020, 0x0048,0x0004, 0x004A,0x0004, 0x004A,0x0005,
    0x0049,0x0004, 0x0048,0x0006, 0x004A,0x0006, 0x0048,0x0007, 0x004A,0x0007,
    0x0049,0x0006, 0x004A,0x0009, 0x0049,0x000E, 0x004A,0x0010, 0x0048,0x001B,
    0x0048,0x001C, 0x004A,0x001C, 0x0048,0x001D, 0x0049,0x001C, 0x004A,0x001E,
    0x0048,0x001F, 0x0048,0x0020, 0x004A,0x0020, 0x0049,0x0020, 0x004E,0x0003,
    0x004C,0x0004, 0x004E,0x0005, 0x004E,0x0007, 0x004E,0x0009, 0x004D,0x0018,
    0x004C,0x001B, 0x004C,0x001F, 0x004D,0x0020, 0x0052,0x0004, 0x0051,0x0004,
    0x0050,0x0006, 0x0052,0x0006, 0x0051,0x0006, 0x0050,0x000D, 0x0050,0x000F,
    0x0051,0x000E, 0x0050,0x0010, 0x0050,0x0011, 0x0050,0x0017, 0x0051,0x0016,
    0x0050,0x0018, 0x0050,0x0019, 0x0050,0x001B, 0x0051,0x001A, 0x0050,0x001D,
    0x0051,0x001C, 0x0050,0x001E, 0x0050,0x001F, 0x0051,0x001E, 0x0050,0x0020,
    0x0050,0x0021, 0x0051,0x0020, 0x0054,0x0002, 0x0056,0x0002, 0x0054,0x0003,
    0x0056,0x0005, 0x0054,0x0006, 0x0056,0x0006, 0x0054,0x0007, 0x0056,0x0007,
    0x0056,0x0009, 0x0055,0x000C, 0x0055,0x0012, 0x0054,0x0015, 0x0054,0x0017,
    0x0055,0x0016, 0x0056,0x0018, 0x0055,0x001A, 0x0055,0x001E, 0x0056,0x0020,
    0x0056,0x0028, 0x0058,0x0002, 0x005A,0x0002, 0x0058,0x0003, 0x005A,0x0003,
    0x0059,0x0002, 0x005A,0x0005, 0x005A,0x0006, 0x0058,0x0007, 0x005A,0x0007,
    0x0059,0x0006, 0x005A,0x0009, 0x0058,0x0013, 0x0058,0x0014, 0x005A,0x0014,
    0x0058,0x0015, 0x005A,0x0016, 0x0058,0x0017, 0x005A,0x0018, 0x0059,0x001C,
    0x005A,0x0020, 0x005E,0x0003, 0x005D,0x0002, 0x005E,0x0005, 0x005C,0x0007,
    0x005E,0x0007, 0x005E,0x0009, 0x005D,0x000E, 0x005E,0x0014, 0x005C,0x0015,
    0x005D,0x001E, 0x005E,0x0020, 0x005D,0x0020, 0x005E,0x0028, 0x0060,0x0002,
    0x0062,0x0002, 0x0062,0x0003, 0x0061,0x0002, 0x0060,0x0006, 0x0060,0x0007,
    0x0062,0x0007, 0x0061,0x0006, 0x0061,0x000C, 0x0062,0x0010, 0x0060,0x0011,
    0x0060,0x0013, 0x0061,0x0012, 0x0061,0x0014, 0x0060,0x0016, 0x0060,0x0017,
    0x0061,0x0016, 0x0062,0x0018, 0x0060,0x0019, 0x0061,0x0018, 0x0060,0x001F,
    0x0061,0x001E, 0x0060,0x0020, 0x0062,0x0020, 0x0060,0x0021, 0x0060,0x0027,
    0x0060,0x0028, 0x0062,0x0028, 0x0064,0x0002, 0x0066,0x0002, 0x0066,0x0003,
    0x0064,0x0004, 0x0066,0x0004, 0x0066,0x0005, 0x0066,0x0007, 0x0066,0x0009,
    0x0066,0x000A, 0x0066,0x000C, 0x0065,0x000C, 0x0066,0x000E, 0x0065,0x000E,
    0x0066,0x0010, 0x0065,0x0010, 0x0066,0x0020, 0x0066,0x0028, 0x0066,0x0030,
    0x0068,0x0002, 0x006A,0x0002, 0x0068,0x0003, 0x006A,0x0003, 0x006A,0x0004,
    0x0068,0x0005, 0x006A,0x0005, 0x0069,0x0004, 0x006A,0x0007, 0x006A,0x0009,
    0x0068,0x000B, 0x0069,0x000A, 0x0068,0x000D, 0x0068,0x000F, 0x006A,0x0010,
    0x0068,0x0011, 0x006E,0x0003, 0x006D,0x0002, 0x006C,0x0004, 0x006C,0x0005,
    0x006E,0x0005, 0x006E,0x0007, 0x006E,0x0009, 0x006C,0x000B, 0x006C,0x000D,
    0x006C,0x0010, 0x006E,0x0010, 0x006C,0x0011, 0x006E,0x0020, 0x0070,0x0002,
    0x0072,0x0002, 0x0072,0x0003, 0x0071,0x0002, 0x0070,0x0004, 0x0070,0x0005,
    0x0072,0x0005, 0x0071,0x0004, 0x0072,0x000A, 0x0070,0x000B, 0x0071,0x000A,
    0x0070,0x000C, 0x0070,0x000E, 0x0070,0x000F, 0x0070,0x0010, 0x0072,0x0010,
    0x0070,0x0011, 0x0071,0x0010, 0x0071,0x0014, 0x0072,0x0018, 0x0070,0x0019,
    0x0070,0x001D, 0x0071,0x001C, 0x0070,0x0020, 0x0072,0x0020, 0x0070,0x0021,
    0x0071,0x0024, 0x0070,0x0028, 0x0072,0x0028, 0x0070,0x002B, 0x0070,0x002F,
    0x0070,0x0030, 0x0072,0x0030, 0x0070,0x0031, 0x0075,0x0030, 0x0079,0x0006,
    0x0079,0x0008, 0x0079,0x0028, 0x0079,0x0038, 0x007E,0x0008, 0x007E,0x0009,
    0x007D,0x0010, 0x0081,0x0002, 0x0081,0x0004, 0x0080,0x0009, 0x0081,0x0008,
    0x0081,0x000A, 0x0081,0x0010, 0x0081,0x001C, 0x0081,0x0022, 0x0082,0x0028,
    0x0081,0x0028, 0x0081,0x002A, 0x0082,0x0030, 0x0081,0x0030, 0x0081,0x003A,
    0x0081,0x003C, 0x0085,0x0006, 0x0086,0x0008, 0x0086,0x0009, 0x0085,0x0008,
    0x0085,0x0032, 0x0086,0x0038, 0x0085,0x0038, 0x008A,0x0002, 0x0089,0x0002,
    0x008A,0x0004, 0x0089,0x0004, 0x008A,0x0008, 0x0088,0x0009, 0x0089,0x0008,
    0x0089,0x000C, 0x0089,0x000E, 0x0088,0x0011, 0x0089,0x0010, 0x0089,0x001A,
    0x0089,0x0024, 0x0089,0x0028, 0x0088,0x002B, 0x0088,0x0030, 0x008A,0x0030,
    0x0089,0x0030, 0x0089,0x0034, 0x008C,0x0009, 0x008E,0x0028, 0x0092,0x0006,
    0x0092,0x0007, 0x0091,0x0010, 0x0091,0x0020, 0x0092,0x0038, 0x0091,0x0040,
    0x0096,0x0007, 0x009A,0x0007, 0x0099,0x0044, 0x009C,0x0006, 0x009E,0x0006,
    0x009C,0x0007, 0x009D,0x0006, 0x009C,0x0013, 0x009D,0x0014, 0x009C,0x0017,
    0x009C,0x0019, 0x009C,0x001B, 0x009E,0x001C, 0x009D,0x0042, 0x00A2,0x0006,
    0x00A2,0x0007, 0x00A1,0x0016, 0x00A0,0x0019, 0x00A1,0x0040, 0x00A6,0x0006,
    0x00A4,0x0007, 0x00A6,0x0007, 0x00A5,0x0006, 0x00A6,0x0008, 0x00A4,0x0009,
    0x00A6,0x0009, 0x00A5,0x0008, 0x00A5,0x0024, 0x00A4,0x0033, 0x00A4,0x0038,
    0x00A6,0x0038, 0x00A5,0x0038, 0x00A5,0x0040, 0x00A5,0x0044, 0x00A6,0x0046,
    0x00A9,0x0008, 0x00A8,0x0021, 0x00A8,0x0031, 0x00A8,0x0039, 0x00A8,0x0045,
    0x00A9,0x0044, 0x00AE,0x0009, 0x00AD,0x002A, 0x00B1,0x0002, 0x00B0,0x0009,
    0x00B2,0x0009, 0x00B1,0x000E, 0x00B1,0x0010, 0x00B1,0x0028, 0x00B6,0x0002,
    0x00B6,0x0009, 0x00B5,0x0024, 0x00B5,0x002A, 0x00B5,0x0032, 0x00B8,0x0005,
    0x00BA,0x0005, 0x00B9,0x0004, 0x00BA,0x0008, 0x00B8,0x0009, 0x00BA,0x0009,
    0x00B9,0x000E, 0x00B8,0x0027, 0x00B8,0x002B, 0x00BA,0x0030, 0x00B8,0x0031,
    0x00B9,0x0030, 0x00B9,0x0034, 0x00BA,0x004E, 0x00B9,0x004E, 0x00BA,0x0050,
    0x00BC,0x002D, 0x00BC,0x0035, 0x00C2,0x0007, 0x00C6,0x0007, 0x00C5,0x0018,
    0x00C5,0x0020, 0x00CA,0x0007, 0x00C9,0x0032, 0x00CC,0x0005, 0x00CE,0x0006,
    0x00CC,0x0007, 0x00CC,0x0013, 0x00CC,0x0015, 0x00CC,0x0017, 0x00CC,0x0018,
    0x00CC,0x001D, 0x00CD,0x001C, 0x00CE,0x0020, 0x00CC,0x0021, 0x00CD,0x0020,
    0x00CD,0x0036, 0x00CC,0x0045, 0x00CD,0x0044, 0x00CE,0x005E, 0x00D1,0x0004,
    0x00D1,0x0044, 0x00D6,0x0006, 0x00D4,0x0007, 0x00D6,0x0007, 0x00D5,0x0006,
    0x00D6,0x0008, 0x00D4,0x0009, 0x00D5,0x0008, 0x00D5,0x0024, 0x00D4,0x0033,
    0x00D4,0x0038, 0x00D6,0x0038, 0x00D5,0x0038, 0x00D5,0x0040, 0x00D5,0x0044,
    0x00D6,0x0046, 0x00D9,0x0008, 0x00D8,0x0045, 0x00D9,0x0044, 0x00DD,0x0006,
    0x00DD,0x0008, 0x00DD,0x0038, 0x00E1,0x0004, 0x00E1,0x0030, 0x00E6,0x0004,
    0x00E5,0x0022, 0x00E5,0x0032, 0x00E6,0x0066, 0x00E8,0x0003, 0x00EA,0x0003,
    0x00E9,0x0002, 0x00E9,0x0004, 0x00EA,0x0008, 0x00E8,0x0009, 0x00EA,0x0009,
    0x00E9,0x0008, 0x00E8,0x0023, 0x00EA,0x0028, 0x00E9,0x0028, 0x00E8,0x002B,
    0x00E8,0x002D, 0x00E9,0x0034, 0x00E8,0x004E, 0x00E9,0x004E, 0x00EA,0x0050,
    0x00EA,0x0066, 0x00EC,0x000D, 0x00EC,0x0025, 0x00EC,0x0035, 0x00F2,0x005C,
    0x00F5,0x0002, 0x00F4,0x0017, 0x00F5,0x0020, 0x00F9,0x0032, 0x00FC,0x0003,
    0x00FE,0x0006, 0x00FC,0x0007, 0x00FD,0x0006, 0x00FC,0x0013, 0x00FC,0x0015,
    0x00FD,0x0014, 0x00FE,0x0018, 0x00FD,0x0018, 0x00FC,0x001F, 0x00FD,0x0036,
    0x00FC,0x0044, 0x00FD,0x0044, 0x00FC,0x005D, 0x00FE,0x0076, 0x0101,0x0002,
    0x0101,0x0012, 0x0101,0x0044, 0x0106,0x0009, 0x0105,0x0008, 0x0105,0x000A,
    0x0106,0x0030, 0x0106,0x004E, 0x0105,0x0050, 0x010A,0x0009, 0x0108,0x0023,
    0x0108,0x002B, 0x0109,0x0044, 0x010A,0x004E, 0x0109,0x0052, 0x0109,0x006A,
    0x010E,0x0008, 0x010C,0x0009, 0x010D,0x0008, 0x010E,0x0028, 0x010D,0x0034,
    0x010E,0x004E, 0x0111,0x0006, 0x0112,0x0008, 0x0110,0x0009, 0x0112,0x0009,
    0x0111,0x0008, 0x0111,0x000A, 0x0111,0x0012, 0x0112,0x0038, 0x0111,0x0038,
    0x0111,0x004C, 0x0110,0x004E, 0x0114,0x0009, 0x0116,0x0009, 0x0115,0x0008,
    0x0114,0x000B, 0x0114,0x0013, 0x0114,0x001B, 0x0114,0x0033, 0x0114,0x0038,
    0x0114,0x0049, 0x0114,0x004E, 0x011A,0x0007, 0x011E,0x0006, 0x011C,0x0013,
    0x011C,0x001B, 0x011E,0x0038, 0x011E,0x0044, 0x011D,0x0082, 0x011E,0x008A,
    0x0122,0x0006, 0x0120,0x0007, 0x0121,0x0006, 0x0122,0x0044, 0x0122,0x008A,
    0x0126,0x0006, 0x0125,0x000A, 0x0124,0x0013, 0x0124,0x0015, 0x0124,0x0018,
    0x0124,0x0019, 0x0124,0x001B, 0x0124,0x001D, 0x0124,0x0020, 0x0124,0x0021,
    0x0124,0x0044, 0x0125,0x0086, 0x0128,0x0007, 0x012A,0x0007, 0x0129,0x0006,
    0x012A,0x0018, 0x012A,0x0020, 0x012A,0x0038, 0x0129,0x003E, 0x012A,0x008A,
    0x012D,0x0038, 0x0132,0x0009, 0x0131,0x0094, 0x0135,0x0002, 0x0135,0x0006,
    0x0136,0x0009, 0x0135,0x0008, 0x0135,0x0018, 0x0136,0x0028, 0x0135,0x0028,
    0x0136,0x0038, 0x0135,0x0038, 0x0135,0x0066, 0x0135,0x0096, 0x013A,0x0009,
    0x013E,0x0002, 0x013D,0x0002, 0x013E,0x0006, 0x013D,0x0006, 0x013E,0x0008,
    0x013D,0x0008, 0x013D,0x0014, 0x013D,0x0016, 0x013D,0x0028, 0x013C,0x0033,
    0x013D,0x0038, 0x013D,0x007C, 0x0145,0x0004, 0x0145,0x0008, 0x0145,0x0028,
    0x0145,0x0030, 0x0145,0x009A, 0x014A,0x0004, 0x014A,0x008A, 0x014D,0x0018,
    0x014D,0x0020, 0x0151,0x005C, 0x0155,0x0004, 0x0156,0x0006, 0x0154,0x000B,
    0x0154,0x000D, 0x0154,0x000F, 0x0154,0x0011, 0x0154,0x001B, 0x0155,0x0044,
    0x0154,0x0053, 0x0154,0x006B, 0x0154,0x0073, 0x0154,0x008A, 0x015A,0x0004,
    0x0159,0x000E, 0x0158,0x0011, 0x0158,0x001D, 0x015E,0x0009, 0x0162,0x0009,
    0x0165,0x0008, 0x0169,0x0006, 0x016A,0x0008, 0x0169,0x0008, 0x016A,0x0038,
    0x0169,0x0038, 0x016D,0x0002, 0x016D,0x0006, 0x016E,0x0009, 0x016D,0x0008,
    0x016D,0x0016, 0x016E,0x0066, 0x0172,0x0002, 0x0172,0x0009, 0x0171,0x002A,
    0x0171,0x0032, 0x0174,0x0007, 0x0176,0x0007, 0x0175,0x0006, 0x0176,0x0008,
    0x0174,0x0009, 0x0176,0x0009, 0x0175,0x0008, 0x0175,0x0016, 0x0175,0x0024,
    0x0175,0x002C, 0x0174,0x0033, 0x0176,0x0038, 0x0176,0x0050, 0x0175,0x0070,
    0x0176,0x00AA, 0x0176,0x00AC, 0x0178,0x002D, 0x0178,0x0033, 0x0178,0x0035,
    0x017E,0x0004, 0x017C,0x0005, 0x017E,0x0005, 0x017D,0x0004, 0x017E,0x0008,
    0x017C,0x0009, 0x017D,0x0008, 0x017D,0x002A, 0x017E,0x004E, 0x017E,0x0066,
    0x017D,0x0066, 0x017C,0x007E, 0x017E,0x0080, 0x017D,0x009E, 0x017D,0x00AA,
    0x0181,0x0008, 0x0180,0x0067, 0x0180,0x007F, 0x0180,0x009F, 0x0181,0x009E,
    0x0180,0x00AB, 0x0186,0x0005, 0x0185,0x0020, 0x018A,0x0005, 0x0189,0x0032,
    0x0189,0x0052, 0x018A,0x0054, 0x0189,0x006A, 0x018A,0x006C, 0x018E,0x0004,
    0x018C,0x0005, 0x018C,0x0007, 0x018D,0x0006, 0x018C,0x000D, 0x018C,0x000F,
    0x018C,0x0011, 0x018D,0x0036, 0x018D,0x0044, 0x018C,0x0074, 0x018E,0x00BC,
    0x0191,0x0006, 0x0190,0x0037, 0x0191,0x009E, 0x0190,0x00BF, 0x0196,0x0009,
    0x019A,0x0009, 0x019C,0x0009, 0x019C,0x004B, 0x01A6,0x0004, 0x01A4,0x0005,
    0x01A6,0x0005, 0x01A5,0x0004, 0x01A6,0x0008, 0x01A4,0x0009, 0x01A5,0x0008,
    0x01A5,0x002A, 0x01A6,0x004E, 0x01A6,0x0066, 0x01A4,0x007E, 0x01A6,0x0080,
    0x01A5,0x009E, 0x01A5,0x00AA, 0x01A9,0x0008, 0x01A8,0x007F, 0x01A8,0x009F,
    0x01A9,0x009E, 0x01A8,0x00AB, 0x01AD,0x0006, 0x01AD,0x0024, 0x01AD,0x005C,
    0x01AE,0x00C6, 0x01AD,0x00D2, 0x01B2,0x0006, 0x01B2,0x0009, 0x01B1,0x0022,
    0x01B1,0x002A, 0x01B2,0x004E, 0x01B4,0x0003, 0x01B6,0x0003, 0x01B5,0x0002,
    0x01B6,0x0008, 0x01B4,0x0009, 0x01B6,0x0009, 0x01B5,0x0008, 0x01B5,0x0022,
    0x01B5,0x002C, 0x01B4,0x0035, 0x01B4,0x0066, 0x01B4,0x00AA, 0x01B6,0x00AC,
    0x01B5,0x00B6, 0x01B4,0x00C3, 0x01B8,0x0015, 0x01B8,0x0025, 0x01B8,0x002D,
    0x01BD,0x0004, 0x01BD,0x0008, 0x01BD,0x0030, 0x01C5,0x0002, 0x01C4,0x000F,
    0x01C5,0x0010, 0x01CA,0x0006, 0x01C9,0x0044, 0x01CC,0x0003, 0x01CC,0x0005,
    0x01CC,0x0052, 0x01CE,0x0054, 0x01CC,0x006A, 0x01CE,0x006C, 0x01CC,0x009E,
    0x01CE,0x00DC, 0x01D1,0x0002, 0x01D0,0x0053, 0x01D0,0x006B, 0x01D1,0x009E,
    0x01D4,0x0009, 0x01D8,0x0009, 0x01DE,0x0009, 0x01E2,0x0009, 0x01E1,0x0008,
    0x01E1,0x0012, 0x01E2,0x0038, 0x01E2,0x00AA, 0x01E1,0x00AC, 0x01EE,0x0009,
    0x01ED,0x0008, 0x01EC,0x0033, 0x01EC,0x0038, 0x01EC,0x0049, 0x01EC,0x004E,
    0x01EC,0x00A5, 0x01EC,0x00AA, 0x01F8,0x0011, 0x01F8,0x0020, 0x01F9,0x007C,
    0x01FD,0x007E, 0x0201,0x0004, 0x0200,0x00B3, 0x0208,0x0009, 0x0210,0x0009,
    0x0216,0x0009, 0x0219,0x0030, 0x0221,0x0038, 0x0225,0x0030, 0x022A,0x008A,
    0x022A,0x00F6, 0x022D,0x0020, 0x0234,0x0011, 0x0234,0x0013, 0x0234,0x0021,
    0x0234,0x005B, 0x0234,0x008A, 0x0234,0x00B9, 0x0234,0x00F5, 0x0234,0x00F6,
    0x023E,0x0038, 0x023D,0x0038, 0x0242,0x007E, 0x0248,0x00E6, 0x0251,0x0038,
    0x0254,0x0009, 0x0255,0x002C, 0x0254,0x0066, 0x0255,0x0066, 0x0254,0x00C6,
    0x0255,0x00FC, 0x0255,0x0118, 0x0255,0x011A, 0x0259,0x0008, 0x0268,0x0007,
    0x0268,0x005C, 0x0268,0x00BE, 0x0268,0x00D2, 0x026D,0x0006, 0x027D,0x0026,
    0x027E,0x0028, 0x0288,0x007E, 0x028C,0x0009, 0x028D,0x002C, 0x028C,0x0066,
    0x028D,0x0066, 0x028C,0x00C6, 0x028D,0x00FC, 0x028D,0x0118, 0x028D,0x011A,
    0x0291,0x0008, 0x0295,0x0030, 0x029C,0x0005, 0x029C,0x0052, 0x029C,0x006A,
    0x029C,0x00BA, 0x02A1,0x0004, 0x02A9,0x0026, 0x02AA,0x0028, 0x02B2,0x011A,
    0x02B1,0x011C, 0x02BA,0x00AA, 0x02BE,0x0009, 0x02BD,0x0008, 0x02BC,0x0033,
    0x02BC,0x0038, 0x02BC,0x0049, 0x02BC,0x004E, 0x02BC,0x00A5, 0x02BC,0x00AA,
    0x02BC,0x0115, 0x02BC,0x011A, 0x02C8,0x0011, 0x02C8,0x0018, 0x02C9,0x012A,
    0x02C9,0x0146, 0x02CD,0x0160, 0x02D1,0x0002, 0x02D0,0x001B, 0x02D0,0x002B,
    0x02D0,0x0033, 0x02D0,0x005F, 0x02D8,0x0009, 0x02E4,0x0009, 0x02EC,0x0009,
    0x02F6,0x0038, 0x02F6,0x008A, 0x02F6,0x00F6, 0x02F6,0x015E, 0x02F9,0x0102,
    0x02F9,0x013C, 0x02F9,0x0144, 0x0302,0x008A, 0x0302,0x00F6, 0x0302,0x015E,
    0x0309,0x0020, 0x0309,0x0044, 0x0309,0x0086, 0x0309,0x0108, 0x0309,0x0172,
    0x0309,0x0176, 0x030D,0x00DA, 0x0312,0x0100, 0x0315,0x0074, 0x031D,0x0130,
    0x0321,0x015C, 0x032E,0x0189, 0x0332,0x0153, 0x0336,0x00A1, 0x033A,0x0189,
    0x033A,0x018D, 0x0342,0x0157, 0x0342,0x018D, 0x0344,0x00E6, 0x0344,0x014E,
    0x0349,0x0150, 0x0352,0x0139, 0x0352,0x0189, 0x0358,0x007E, 0x0358,0x0134,
    0x035D,0x0130, 0x035D,0x0136, 0x0360,0x0074, 0x0360,0x00DA, 0x0360,0x012A,
    0x0361,0x012A, 0x0360,0x0146, 0x0361,0x0146, 0x037E,0x0033, 0x0381,0x0030,
    0x038D,0x011C, 0x0392,0x002B, 0x0392,0x0033, 0x0394,0x0074, 0x0394,0x00DA,
    0x0394,0x012A, 0x0395,0x012A, 0x0394,0x0146, 0x0395,0x0146, 0x039A,0x018D,
    0x039C,0x005C, 0x039C,0x00BE, 0x039C,0x00D2, 0x039C,0x0144, 0x03A0,0x0052,
    0x03A0,0x006A, 0x03A0,0x00BA, 0x03A0,0x0124, 0x03A5,0x0020, 0x03A5,0x0044,
    0x03A5,0x0086, 0x03A5,0x0108, 0x03A5,0x0172, 0x03A5,0x0176, 0x03A8,0x002B,
    0x03A8,0x01BF, 0x03AD,0x019C, 0x03B1,0x01B2, 0x03BA,0x0038, 0x03BD,0x0006,
    0x03BE,0x0038, 0x03C2,0x0189, 0x03C9,0x0004, 0x03C8,0x00B3, 0x03C8,0x0189,
    0x03CC,0x013B, 0x03D0,0x0017, 0x03D0,0x0021, 0x03D0,0x0033, 0x03D0,0x00F3,
    0x03D0,0x0157, 0x03D4,0x0017, 0x03D4,0x0033, 0x03D5,0x0044, 0x03D4,0x0047,
    0x03D4,0x008B, 0x03D5,0x00D8, 0x03D4,0x00EF, 0x03D4,0x00F7, 0x03D4,0x0103,
    0x03D4,0x013D, 0x03D5,0x0142, 0x03D4,0x015B, 0x03D4,0x015F, 0x03DC,0x0019,
    0x03DC,0x0021, 0x03DC,0x0038, 0x03DD,0x0086, 0x03DD,0x00D8, 0x03DD,0x0142,
    0x03E0,0x000F, 0x03E0,0x0021, 0x03E0,0x002B, 0x03E0,0x0087, 0x03E4,0x0011,
    0x03E5,0x0072, 0x03E4,0x008B, 0x03E5,0x009E, 0x03E4,0x00EF, 0x03E4,0x00F7,
    0x03E5,0x0122, 0x03E4,0x015B, 0x03E4,0x015F, 0x03E4,0x01EA, 0x03EC,0x0011,
    0x03EC,0x0021, 0x03EC,0x0030, 0x03ED,0x0194, 0x03F1,0x00EE, 0x03F1,0x015A,
    0x03F1,0x019C, 0x03F4,0x008B, 0x03F4,0x00F7, 0x03F4,0x015F, 0x03F8,0x0041,
    0x03FC,0x0047, 0x0402,0x0189, 0x0404,0x009B, 0x0408,0x0011, 0x040D,0x010E,
    0x0410,0x000F, 0x0410,0x0011, 0x0410,0x0017, 0x0410,0x0019, 0x0410,0x002B,
    0x0410,0x0030, 0x0410,0x0033, 0x0410,0x0038, 0x0416,0x0033, 0x041A,0x0038,
    0x041A,0x008A, 0x041A,0x00F6, 0x041A,0x015E, 0x041D,0x00DA, 0x041D,0x016A,
    0x041D,0x0174, 0x0422,0x018D, 0x0425,0x0038, 0x042A,0x0021, 0x042A,0x008A,
    0x042A,0x00F6, 0x042A,0x015E, 0x042D,0x0030, 0x042D,0x0212, 0x0432,0x018D,
    0x0435,0x002C, 0x0435,0x0090, 0x0435,0x00E4, 0x0435,0x014C, 0x0435,0x01B0,
    0x0435,0x01CA, 0x0439,0x0020, 0x0439,0x0044, 0x0439,0x0086, 0x0439,0x0108,
    0x0439,0x0172, 0x0439,0x0176, 0x0442,0x0033, 0x0446,0x016F, 0x044A,0x018D,
    0x044E,0x0193, 0x0456,0x0033, 0x0456,0x018D, 0x045A,0x001F, 0x045A,0x002B,
    0x045A,0x0043, 0x045A,0x00B5, 0x045A,0x011F, 0x045A,0x018D, 0x045E,0x002B,
    0x0460,0x0017, 0x0460,0x0021, 0x0460,0x0033, 0x0460,0x00F3, 0x046A,0x013B,
    0x0470,0x00E6, 0x0470,0x014E, 0x0470,0x01D0, 0x0479,0x0038, 0x047E,0x001D,
    0x047E,0x002B, 0x047E,0x00CF, 0x047E,0x0189, 0x047E,0x01FC, 0x0484,0x0009,
    0x0484,0x0066, 0x0484,0x00C6, 0x0484,0x01B0, 0x0484,0x01CA, 0x048A,0x0189,
    0x048C,0x0007, 0x048C,0x005C, 0x048C,0x00BE, 0x048C,0x00D2, 0x048C,0x0144,
    0x048C,0x01AC, 0x048D,0x021A, 0x049D,0x00E6, 0x049D,0x012A, 0x049D,0x0146,
    0x04AA,0x0189, 0x04AE,0x0033, 0x04AE,0x018D, 0x04B2,0x018D, 0x04B4,0x0074,
    0x04B4,0x00DA, 0x04B4,0x012A, 0x04B4,0x0146, 0x04BC,0x0007, 0x04BC,0x005C,
    0x04BC,0x00BE, 0x04BC,0x00D2, 0x04BC,0x0144, 0x04BC,0x01AC, 0x04BD,0x021A,
    0x04C1,0x0066, 0x04C1,0x00AA, 0x04C1,0x011A, 0x04C4,0x0005, 0x04C4,0x0052,
    0x04C4,0x006A, 0x04C4,0x00BA, 0x04C4,0x0124, 0x04C4,0x01A2, 0x04C9,0x0020,
    0x04C9,0x0044, 0x04C9,0x0086, 0x04C9,0x0108, 0x04C9,0x0172, 0x04C9,0x0176,
    0x04D5,0x022E, 0x04E5,0x0144, 0x04E9,0x00DA, 0x04F2,0x01F2, 0x04F1,0x0202,
    0x04F5,0x0006, 0x04F6,0x0038, 0x04FA,0x002B, 0x0502,0x0033, 0x0502,0x018D,
    0x0502,0x01D4, 0x0502,0x01F0, 0x0501,0x027C, 0x0505,0x0002, 0x0504,0x001B,
    0x0504,0x002B, 0x0504,0x0033, 0x0504,0x005F, 0x0508,0x0017, 0x0508,0x0033,
    0x0509,0x0044, 0x0508,0x0047, 0x0508,0x005F, 0x0508,0x008B, 0x0509,0x00D8,
    0x0508,0x00F7, 0x0509,0x0142, 0x0508,0x015B, 0x0508,0x015F, 0x0508,0x0282,
    0x0510,0x0019, 0x0510,0x0021, 0x0510,0x0038, 0x0511,0x0086, 0x0515,0x0200,
    0x0515,0x0228, 0x0518,0x0033, 0x0518,0x008B, 0x0518,0x00F7, 0x0518,0x015F,
    0x051C,0x0047, 0x0525,0x000C, 0x0525,0x01CE, 0x0528,0x0011, 0x0530,0x0011,
    0x0530,0x0021, 0x0530,0x0028, 0x0530,0x0038, 0x0536,0x0033, 0x0539,0x01BC,
    0x053C,0x0011, 0x053C,0x0028, 0x053D,0x005A, 0x053C,0x008B, 0x053D,0x00B8,
    0x053C,0x00F7, 0x053C,0x00FF, 0x053C,0x0107, 0x053D,0x010E, 0x053C,0x0141,
    0x053C,0x0159, 0x053C,0x015F, 0x053C,0x0171, 0x053C,0x0179, 0x053C,0x01B7,
    0x053C,0x01C9, 0x053C,0x0277, 0x0541,0x00BA, 0x0545,0x005C, 0x0548,0x0011,
    0x0548,0x0019, 0x0548,0x0028, 0x054D,0x00DA, 0x0550,0x0019, 0x0550,0x0021,
    0x0550,0x0038, 0x055A,0x008A, 0x055A,0x00F6, 0x055A,0x015E, 0x0566,0x008A,
    0x0566,0x00F6, 0x0566,0x015E, 0x0569,0x0038, 0x056D,0x00AA, 0x056D,0x00FC,
    0x0571,0x0030, 0x0575,0x0020, 0x0575,0x0044, 0x0575,0x0086, 0x0575,0x0108,
    0x0575,0x0172, 0x0575,0x0176, 0x0579,0x0038, 0x0579,0x0270, 0x057D,0x021A,
    0x0582,0x0189, 0x058A,0x0100, 0x058A,0x01E4, 0x058A,0x021F, 0x058A,0x0255,
    0x0592,0x0193, 0x0592,0x0221, 0x0598,0x000F, 0x0598,0x0021, 0x0598,0x002B,
    0x0598,0x0087, 0x0598,0x0281, 0x059D,0x01BC, 0x05A6,0x0153, 0x05A9,0x021A,
    0x05AC,0x007E, 0x05AC,0x0134, 0x05AC,0x01CE, 0x05AC,0x0246, 0x05AC,0x025E,
    0x05B2,0x001F, 0x05B2,0x00ED, 0x05B2,0x0202, 0x05B8,0x0009, 0x05B8,0x0066,
    0x05B8,0x00C6, 0x05B8,0x01B0, 0x05B8,0x01CA, 0x05B8,0x025A, 0x05BE,0x018D,
    0x05C1,0x0030, 0x05C4,0x0005, 0x05C4,0x0052, 0x05C4,0x006A, 0x05C4,0x00BA,
    0x05C4,0x0124, 0x05C4,0x01A2, 0x05C4,0x0238, 0x05C5,0x02B6, 0x05C5,0x02C6,
    0x05C9,0x0086, 0x05CE,0x01DB, 0x05D1,0x007E, 0x05D1,0x02C6, 0x05D5,0x0086,
    0x05DA,0x018D, 0x05DA,0x0227, 0x05E0,0x0074, 0x05E0,0x00DA, 0x05E0,0x012A,
    0x05E0,0x0146, 0x05E0,0x0242, 0x05EA,0x018D, 0x05ED,0x0066, 0x05ED,0x00AA,
    0x05F0,0x0007, 0x05F0,0x005C, 0x05F0,0x00BE, 0x05F0,0x00D2, 0x05F0,0x0144,
    0x05F0,0x01AC, 0x05F4,0x0005, 0x05F4,0x0052, 0x05F4,0x006A, 0x05F4,0x00BA,
    0x05F4,0x0124, 0x05F4,0x01A2, 0x05F4,0x0238, 0x05F5,0x02B6, 0x05F5,0x02C6,
    0x05F9,0x0020, 0x05F9,0x0044, 0x05F9,0x0086, 0x05F9,0x0108, 0x05F9,0x0172,
    0x05F9,0x0176, 0x0601,0x026E, 0x0601,0x02CA, 0x0611,0x026A, 0x0615,0x0074,
    0x061E,0x01EA, 0x061E,0x0284, 0x0621,0x0004, 0x0620,0x00B3, 0x0620,0x0189,
    0x0620,0x02C5, 0x0626,0x0033, 0x0626,0x018D, 0x062E,0x002B, 0x062E,0x01E8,
    0x062E,0x0230, 0x062D,0x0312, 0x0631,0x0002, 0x0630,0x001B, 0x0630,0x002B,
    0x0630,0x0033, 0x0630,0x005F, 0x0639,0x024E, 0x0639,0x02C6, 0x063C,0x0033,
    0x063C,0x003F, 0x063C,0x0049, 0x063C,0x008B, 0x063C,0x00F7, 0x063C,0x015F,
    0x063C,0x02C9, 0x0641,0x021A, 0x0649,0x01BA, 0x0649,0x01D0, 0x0649,0x02AE,
    0x064D,0x02E2, 0x064D,0x02FA, 0x0652,0x008F, 0x0654,0x0019, 0x0654,0x0021,
    0x0654,0x0028, 0x0654,0x0030, 0x0656,0x0033, 0x0655,0x02BC, 0x065A,0x0033,
    0x065A,0x0085, 0x065A,0x008F, 0x065C,0x0011, 0x065D,0x0072, 0x065C,0x008B,
    0x065D,0x009E, 0x065C,0x00F7, 0x065D,0x0122, 0x065C,0x015B, 0x065C,0x015F,
    0x065C,0x0279, 0x0664,0x0011, 0x0664,0x0021, 0x0664,0x0030, 0x0669,0x01C4,
    0x0669,0x02C2, 0x066C,0x0011, 0x066C,0x0028, 0x066D,0x005A, 0x066C,0x008B,
    0x066D,0x00B8, 0x066C,0x00F7, 0x066C,0x00FF, 0x066D,0x010E, 0x066C,0x0159,
    0x066C,0x015F, 0x066C,0x01B7, 0x066C,0x01BF, 0x066C,0x01C9, 0x0671,0x005C,
    0x0675,0x00BA, 0x0678,0x0011, 0x0678,0x0019, 0x0678,0x0028, 0x067C,0x01BF,
    0x067C,0x0281, 0x067C,0x0336, 0x0680,0x0011, 0x0680,0x0021, 0x0680,0x0030,
    0x0689,0x01C4, 0x0689,0x02C2, 0x068D,0x024C, 0x0690,0x0011, 0x0690,0x0019,
    0x0690,0x0028, 0x0695,0x00BA, 0x0699,0x005C, 0x069D,0x0040, 0x06A1,0x0008,
    0x06A5,0x0006, 0x06A9,0x0040, 0x06B1,0x0046, 0x06B5,0x0044, 0x06B4,0x015B,
    0x06BA,0x00F9, 0x06BA,0x0161, 0x06BD,0x01A0, 0x06C1,0x0234, 0x06C5,0x0086,
    0x06C9,0x000A, 0x06CD,0x0008, 0x06D0,0x0009, 0x06D6,0x0023, 0x06DA,0x008D,
    0x06DA,0x0161, 0x06DC,0x001D, 0x06DC,0x0263, 0x06E1,0x003C, 0x06E6,0x008D,
    0x06E6,0x00F9, 0x06E9,0x01B0, 0x06E9,0x01CA, 0x06E8,0x01D1, 0x06ED,0x003A,
    0x06F1,0x0030, 0x06F5,0x0028, 0x06F9,0x0008, 0x06FD,0x0006, 0x0701,0x0326,
    0x0705,0x0006, 0x070A,0x01ED, 0x070A,0x0207, 0x070A,0x020B, 0x070A,0x0221,
    0x070A,0x0287, 0x070A,0x029B, 0x070A,0x02AB, 0x070A,0x032D, 0x070D,0x007C,
    0x070D,0x0236, 0x0716,0x011A, 0x0719,0x0080, 0x0718,0x0189, 0x071E,0x00AA,
    0x0721,0x0068, 0x0726,0x0011, 0x0726,0x008B, 0x0726,0x00F7, 0x0726,0x013F,
    0x0726,0x0155, 0x0726,0x015F, 0x0726,0x01DA, 0x0726,0x0207, 0x0729,0x02C6,
    0x072E,0x0011, 0x072E,0x0033, 0x072E,0x003F, 0x072E,0x0049, 0x072D,0x0054,
    0x072D,0x006C, 0x072E,0x008B, 0x072E,0x00F7, 0x072E,0x0107, 0x072E,0x015F,
    0x072E,0x0171, 0x072E,0x0179, 0x072E,0x01BF, 0x072E,0x01C9, 0x072E,0x01ED,
    0x072E,0x0221, 0x072E,0x025C, 0x072E,0x0287, 0x072E,0x028C, 0x072E,0x02AB,
    0x0731,0x0030, 0x0735,0x0028, 0x0739,0x011A, 0x0739,0x0184, 0x0739,0x01D2,
    0x0739,0x021C, 0x0739,0x0264, 0x0739,0x02BA, 0x0739,0x02FC, 0x073E,0x0049,
    0x0740,0x002B, 0x0744,0x0087, 0x0744,0x008D, 0x0744,0x01B5, 0x0749,0x000E,
    0x074D,0x00AA, 0x074D,0x00E4, 0x074D,0x02D4, 0x074D,0x02E8, 0x0751,0x0066,
    0x0751,0x00AA, 0x0755,0x01A2, 0x0759,0x000C, 0x075C,0x01ED, 0x075C,0x0287,
    0x075C,0x02AB, 0x0761,0x0086, 0x0765,0x02B6, 0x0769,0x0010, 0x0769,0x0266,
    0x076D,0x004E, 0x076D,0x007E, 0x076D,0x0326, 0x0772,0x01E1, 0x0772,0x027D,
    0x0776,0x0297, 0x077E,0x008D, 0x0782,0x0033, 0x0785,0x032A, 0x0788,0x008D,
    0x0789,0x02C6, 0x078D,0x0086, 0x0792,0x0089, 0x0795,0x02C6, 0x079A,0x0049,
    0x079A,0x01C7, 0x079C,0x001B, 0x079D,0x021A, 0x079D,0x0260, 0x079D,0x027E,
    0x079D,0x02F6, 0x07A1,0x02B4, 0x07A1,0x0306, 0x07A6,0x029E, 0x07A6,0x0336,
    0x07A9,0x0334, 0x07A9,0x0344, 0x07AC,0x0013, 0x07B2,0x023F, 0x07B5,0x0306,
    0x07BA,0x01DB, 0x07BE,0x0033, 0x07C0,0x0161, 0x07C5,0x02DC, 0x07CE,0x0009,
    0x07CE,0x004E, 0x07D0,0x0009, 0x07D1,0x0024, 0x07D1,0x00E6, 0x07D1,0x011A,
    0x07D1,0x0164, 0x07D1,0x0184, 0x07D1,0x01D2, 0x07D1,0x021C, 0x07D1,0x0264,
    0x07D1,0x02BA, 0x07D1,0x02FC, 0x07D5,0x0038, 0x07DA,0x0009, 0x07D9,0x0008,
    0x07DA,0x004E, 0x07DE,0x0017, 0x07DE,0x0041, 0x07DE,0x0059, 0x07DE,0x005F,
    0x07DE,0x0085, 0x07DE,0x008B, 0x07DE,0x00D9, 0x07DE,0x00EF, 0x07DE,0x00F7,
    0x07DE,0x0103, 0x07DE,0x013D, 0x07DE,0x013F, 0x07DE,0x0143, 0x07DE,0x0155,
    0x07DE,0x015B, 0x07DE,0x015F, 0x07DE,0x0168, 0x07DE,0x027D, 0x07DE,0x0282,
    0x07DE,0x0291, 0x07DE,0x02F1, 0x07DE,0x0318, 0x07E0,0x0007, 0x07E5,0x02EE,
    0x07E9,0x0006, 0x07EA,0x0017, 0x07EA,0x0033, 0x07EA,0x0047, 0x07EA,0x005F,
    0x07EA,0x008B, 0x07EA,0x00EF, 0x07EA,0x00F7, 0x07EA,0x015B, 0x07EA,0x015F,
    0x07EA,0x030F, 0x07EC,0x001F, 0x07EC,0x00F3, 0x07F1,0x00C4, 0x07F1,0x01AA,
    0x07F1,0x01B8, 0x07F1,0x01C2, 0x07F1,0x024A, 0x07F1,0x02E2, 0x07F1,0x02FA,
    0x07F5,0x01B8, 0x07F5,0x024A, 0x07F5,0x02C6, 0x07F5,0x02E2, 0x07F5,0x02FA,
    0x07FA,0x0033, 0x07FE,0x0033, 0x0802,0x0049, 0x0804,0x0009, 0x080A,0x008F,
    0x080D,0x0044, 0x0812,0x0161, 0x0816,0x0021, 0x081A,0x0021, 0x081D,0x0008,
    0x0821,0x0008, 0x0825,0x012A, 0x0825,0x0146, 0x082A,0x01F5, 0x082A,0x0331,
    0x082A,0x0343, 0x082E,0x01A1, 0x082E,0x02D9, 0x0831,0x007E, 0x0835,0x007C,
    0x0835,0x0236, 0x083A,0x0009, 0x083C,0x0033, 0x0840,0x01A5, 0x0846,0x011A,
    0x0848,0x001B, 0x0849,0x02A4, 0x0849,0x033C, 0x0849,0x0348, 0x084D,0x02B6,
    0x0852,0x01A9, 0x0852,0x01C7, 0x0856,0x01C7, 0x0858,0x0009, 0x0859,0x0024,
    0x0859,0x011A, 0x0859,0x0164, 0x0859,0x0184, 0x0859,0x01D2, 0x0859,0x021C,
    0x0859,0x0264, 0x0859,0x02BA, 0x0859,0x02FC, 0x085D,0x0030, 0x085E,0x01A1,
    0x0860,0x01A1, 0x0860,0x01A9, 0x0866,0x0168, 0x0866,0x0282, 0x0866,0x0313,
    0x0866,0x0318, 0x0868,0x0005, 0x0869,0x026C, 0x0869,0x029C, 0x0869,0x02CE,
    0x0869,0x0314, 0x086D,0x0252, 0x086D,0x02B6, 0x086D,0x0302, 0x0872,0x0033,
    0x0876,0x0033, 0x0879,0x00A8, 0x0879,0x014C, 0x0879,0x01A6, 0x0879,0x02D0,
    0x0879,0x02DA, 0x087E,0x002B, 0x087E,0x01A5, 0x0881,0x0324, 0x0886,0x01A5,
    0x0888,0x01C7, 0x088D,0x021A, 0x0890,0x01A5, 0x0896,0x002B, 0x089A,0x01C7,
    0x089E,0x01C7, 0x08A1,0x01BE, 0x08A5,0x02B6, 0x08A8,0x00BD, 0x08AE,0x00F1,
    0x08AE,0x01DD, 0x08B1,0x02B4, 0x08B6,0x01BB, 0x08B8,0x0007, 0x08BE,0x0189,
    0x08BE,0x0281, 0x08C0,0x0005, 0x08C1,0x0314, 0x08C5,0x02B6, 0x08C9,0x0260,
    0x08C9,0x027E, 0x08C9,0x02F6, 0x08CD,0x0134, 0x08D1,0x012A, 0x08D1,0x0146,
    0x08D5,0x00E6, 0x08D9,0x01AC, 0x08DE,0x00BD, 0x08E1,0x031C, 0x08E6,0x00BD,
    0x08E8,0x01BB, 0x08ED,0x021A, 0x08ED,0x0260, 0x08ED,0x02F6, 0x08F0,0x00BD,
    0x08F6,0x01C7, 0x08F9,0x0044, 0x08FD,0x0004, 0x0902,0x0009, 0x0902,0x004E,
    0x0904,0x0009, 0x0905,0x0024, 0x0905,0x011A, 0x0905,0x0164, 0x0905,0x0184,
    0x0905,0x01D2, 0x0905,0x021C, 0x0905,0x0264, 0x0905,0x02BA, 0x0905,0x02FC,
    0x0909,0x0038, 0x090E,0x0009, 0x090D,0x0008, 0x090E,0x004E, 0x0912,0x0017,
    0x0912,0x0041, 0x0912,0x0085, 0x0912,0x008B, 0x0912,0x00D9, 0x0912,0x00EF,
    0x0912,0x00F7, 0x0912,0x0103, 0x0912,0x013D, 0x0912,0x013F, 0x0912,0x0143,
    0x0912,0x0153, 0x0912,0x0155, 0x0912,0x015B, 0x0912,0x015F, 0x0912,0x027D,
    0x0912,0x0291, 0x0912,0x02F1, 0x0914,0x0007, 0x0919,0x0006, 0x091A,0x0017,
    0x091A,0x0033, 0x091A,0x0047, 0x091A,0x008B, 0x091A,0x00EF, 0x091A,0x00F7,
    0x091A,0x015B, 0x091A,0x015F, 0x091A,0x030F, 0x091C,0x001F, 0x091C,0x00F3,
    0x0921,0x00C4, 0x0921,0x01AA, 0x0921,0x01B8, 0x0921,0x024A, 0x0921,0x02E2,
    0x0921,0x02FA, 0x0925,0x01B8, 0x0925,0x024A, 0x0925,0x02C6, 0x092A,0x0033,
    0x092E,0x0033, 0x0932,0x0049, 0x0934,0x0009, 0x093A,0x008F, 0x093D,0x0044,
    0x0941,0x0008, 0x0945,0x0008, 0x0949,0x0008, 0x094D,0x0006, 0x0956,0x0023,
    0x0956,0x0028, 0x0956,0x0235, 0x0956,0x02D3, 0x0958,0x023B, 0x095E,0x00AA,
    0x0962,0x0255, 0x0966,0x0255, 0x0966,0x0277, 0x0969,0x0260, 0x0969,0x02F6,
    0x096C,0x0009, 0x096D,0x0024, 0x096D,0x011A, 0x096D,0x0164, 0x096D,0x0184,
    0x096D,0x01D2, 0x096D,0x021C, 0x096D,0x0264, 0x096D,0x02BA, 0x096D,0x02FC,
    0x0972,0x0023, 0x0972,0x0028, 0x0971,0x0028, 0x0972,0x0235, 0x0974,0x0235,
    0x0974,0x023F, 0x0978,0x002B, 0x097E,0x0028, 0x097E,0x00AF, 0x097E,0x00CD,
    0x097E,0x0159, 0x0980,0x0003, 0x0985,0x0086, 0x0985,0x01C2, 0x098A,0x00AF,
    0x098A,0x00CD, 0x098A,0x0159, 0x098A,0x0277, 0x098D,0x01BC, 0x0992,0x023B,
    0x0996,0x023B, 0x0999,0x00E4, 0x0999,0x02D4, 0x099D,0x02AE, 0x09A0,0x0255,
    0x09A0,0x0277, 0x09A8,0x023B, 0x09AE,0x0023, 0x09B1,0x0024, 0x09B6,0x0009,
    0x09BA,0x0255, 0x09BE,0x0255, 0x09C2,0x0033, 0x09C4,0x0017, 0x09C4,0x0021,
    0x09C4,0x0033, 0x09C4,0x00F3, 0x09C4,0x0317, 0x09C9,0x0002, 0x09CC,0x0127,
    0x09D2,0x0269, 0x09D4,0x0007, 0x09DA,0x0089, 0x09DC,0x0003, 0x09E2,0x0043,
    0x09E2,0x0049, 0x09E2,0x00B5, 0x09E2,0x011F, 0x09E2,0x017B, 0x09E2,0x020D,
    0x09E9,0x014E, 0x09E9,0x02FE, 0x09ED,0x012E, 0x09ED,0x0218, 0x09ED,0x02F4,
    0x09F2,0x0127, 0x09F6,0x0127, 0x09F9,0x00C6, 0x09FC,0x0269, 0x0A04,0x0127,
    0x0A09,0x002C, 0x0A0E,0x0255, 0x0A11,0x0044, 0x0A19,0x0002, 0x0A1C,0x000B,
    0x0A21,0x000A, 0x0A25,0x0008, 0x0A29,0x0182, 0x0A35,0x0086, 0x0A39,0x01EE,
    0x0A39,0x0288, 0x0A3D,0x01EE, 0x0A3D,0x0288, 0x0A40,0x008F, 0x0A45,0x0086,
    0x0A4A,0x0009, 0x0A4E,0x0009, 0x0A52,0x0083, 0x0A52,0x0085, 0x0A52,0x0089,
    0x0A55,0x031C, 0x0A5A,0x0033, 0x0A5A,0x0085, 0x0A5A,0x008F, 0x0A5A,0x00F1,
    0x0A5A,0x0249, 0x0A5C,0x0017, 0x0A5C,0x0033, 0x0A65,0x0044, 0x0A69,0x0008,
    0x0A6D,0x0006, 0x0A71,0x004E, 0x0A75,0x004C, 0x0A75,0x019E, 0x0A75,0x0232,
    0x0A79,0x0006, 0x0A7E,0x0009, 0x0A80,0x0023, 0x0A8E,0x0033, 0x0A94,0x000B,
    0x0A94,0x0013, 0x0A94,0x001B, 0x0AA0,0x0009, 0x0AA4,0x0009, 0x0AA8,0x0009,
    0x0ABE,0x0033, 0x0AC1,0x0010, 0x0AC5,0x0108, 0x0AC5,0x0172, 0x0AC9,0x0108,
    0x0AC9,0x0172, 0x0AD1,0x0090, 0x0AD6,0x0043, 0x0AD6,0x00B5, 0x0AD6,0x011F,
    0x0ADE,0x008F, 0x0AE6,0x002B, 0x0AE6,0x008F, 0x0AE6,0x0281, 0x0AE9,0x004E,
    0x0AED,0x031A, 0x0AF2,0x0089, 0x0AF2,0x008F, 0x0AF6,0x0083, 0x0AFD,0x0086,
    0x0B06,0x0009, 0x0B0D,0x0086, 0x0B16,0x0009, 0x0B22,0x0033, 0x0B25,0x004E,
    0x0B2E,0x00FB, 0x0B32,0x0163, 0x0B41,0x009A, 0x0B4E,0x0009, 0x0B4D,0x0008,
    0x0B4E,0x00F9, 0x0B4E,0x0100, 0x0B4E,0x0161, 0x0B4E,0x0168, 0x0B4E,0x01E4,
    0x0B4E,0x0282, 0x0B4E,0x0310, 0x0B4E,0x0318, 0x0B51,0x0234, 0x0B55,0x0044,
    0x0B59,0x0002, 0x0B5C,0x0009, 0x0B60,0x001F, 0x0B60,0x02F9, 0x0B65,0x00A2,
    0x0B68,0x01CF, 0x0B6D,0x0096, 0x0B6C,0x0310, 0x0B72,0x0033, 0x0B75,0x0038,
    0x0B79,0x012A, 0x0B79,0x0146, 0x0B7E,0x011A, 0x0B81,0x00E8, 0x0B86,0x0009,
    0x0B86,0x004E, 0x0B89,0x00C8, 0x0B8E,0x008B, 0x0B8E,0x00F7, 0x0B8E,0x0103,
    0x0B8E,0x013D, 0x0B8E,0x015F, 0x0B92,0x008B, 0x0B91,0x00C0, 0x0B91,0x00D4,
    0x0B92,0x00F7, 0x0B92,0x015F, 0x0B92,0x02F2, 0x0B95,0x0038, 0x0B99,0x0028,
    0x0B9D,0x0016, 0x0BA1,0x007C, 0x0BA1,0x0236, 0x0BA5,0x0014, 0x0BA8,0x0033,
    0x0BAD,0x0008, 0x0BB1,0x0004, 0x0BB5,0x009A, 0x0BBD,0x0028, 0x0BC1,0x0018,
    0x0BC8,0x000F, 0x0BC8,0x0011, 0x0BCC,0x0011, 0x0BD0,0x002B, 0x0BD6,0x0033,
    0x0BD6,0x01C7, 0x0BDA,0x002B, 0x0BDA,0x0189, 0x0BDA,0x01BB, 0x0BDC,0x001B,
    0x0BDD,0x021A, 0x0BDD,0x0260, 0x0BDD,0x02F6, 0x0BE1,0x02B6, 0x0BEC,0x000B,
    0x0BF0,0x0011, 0x0BF0,0x002B, 0x0BF5,0x02B6, 0x0BF9,0x02B6, 0x0BFD,0x02B6,
    0x0C06,0x01DB, 0x0C0D,0x0242, 0x0C11,0x0238, 0x0C15,0x021A, 0x0C19,0x0260,
    0x0C19,0x02F6, 0x0C21,0x0008, 0x0C25,0x0006, 0x0C29,0x0006, 0x0C36,0x01A9,
    0x0C36,0x023F, 0x0C39,0x020E, 0x0C3C,0x000D, 0x0C3C,0x00DB, 0x0C41,0x00DA,
    0x0C46,0x0009, 0x0C4E,0x011A, 0x0C50,0x001B, 0x0C56,0x01A9, 0x0C56,0x01C7,
    0x0C5A,0x01C7, 0x0C5C,0x0009, 0x0C5D,0x011A, 0x0C5D,0x0164, 0x0C5D,0x0184,
    0x0C5D,0x01D2, 0x0C5D,0x021C, 0x0C5D,0x0264, 0x0C5D,0x02BA, 0x0C5D,0x02FC,
    0x0C61,0x0038, 0x0C64,0x01A1, 0x0C64,0x01A9, 0x0C6A,0x0041, 0x0C6A,0x027D,
    0x0C6C,0x0007, 0x0C6D,0x027E, 0x0C71,0x021A, 0x0C76,0x0047, 0x0C7A,0x0049,
    0x0C7A,0x017B, 0x0C7A,0x020D, 0x0C7C,0x001F, 0x0C7C,0x0033, 0x0C7C,0x01A9,
    0x0C80,0x01A9, 0x0C80,0x01C7, 0x0C85,0x0024, 0x0C85,0x0132, 0x0C85,0x0240,
    0x0C8A,0x0033, 0x0C8D,0x0250, 0x0C92,0x0009, 0x0C95,0x02B6, 0x0C9A,0x0033,
    0x0C9E,0x01C7, 0x0CA1,0x004E, 0x0CA6,0x01C7, 0x0CAA,0x00AA, 0x0CAC,0x0009,
    0x0CAD,0x011A, 0x0CAD,0x0164, 0x0CAD,0x0184, 0x0CAD,0x01D2, 0x0CAD,0x021C,
    0x0CAD,0x0264, 0x0CAD,0x02BA, 0x0CAD,0x02FC, 0x0CB1,0x0030, 0x0CB2,0x01A1,
    0x0CB6,0x00AA, 0x0CBA,0x0011, 0x0CBA,0x008B, 0x0CBA,0x00B3, 0x0CBA,0x00D1,
    0x0CBA,0x00F7, 0x0CBA,0x015B, 0x0CBA,0x015F, 0x0CBA,0x025B, 0x0CBA,0x0313,
    0x0CBA,0x0323, 0x0CBC,0x0005, 0x0CC2,0x0011, 0x0CC2,0x008B, 0x0CC2,0x00F7,
    0x0CC2,0x015B, 0x0CC2,0x015F, 0x0CC2,0x0279, 0x0CC6,0x0305, 0x0CC9,0x021A,
    0x0CCD,0x0260, 0x0CCD,0x02F6, 0x0CD0,0x00B7, 0x0CDA,0x002B, 0x0CDA,0x0079,
    0x0CDC,0x0009, 0x0CE0,0x000F, 0x0CE0,0x00B7, 0x0CE5,0x009E, 0x0CEA,0x00B7,
    0x0CEE,0x002B, 0x0CEE,0x0079, 0x0CF1,0x0008, 0x0CF5,0x0008, 0x0CFA,0x000F,
    0x0CFA,0x00B7, 0x0CFD,0x021A, 0x0D02,0x0083, 0x0D02,0x01E3, 0x0D05,0x0216,
    0x0D0A,0x01DD, 0x0D0C,0x0033, 0x0D12,0x0033, 0x0D14,0x0033, 0x0D1A,0x0033,
    0x0D1E,0x001F, 0x0D20,0x0007, 0x0D21,0x027E, 0x0D24,0x0005, 0x0D2A,0x00B5,
    0x0D2D,0x0260, 0x0D2D,0x027E, 0x0D2D,0x02F6, 0x0D31,0x02FE, 0x0D35,0x0086,
    0x0D38,0x01DD, 0x0D46,0x01C7, 0x0D49,0x009E, 0x0D4E,0x01DD, 0x0D51,0x0006,
    0x0D56,0x01DD, 0x0D59,0x0260, 0x0D59,0x02F6, 0x0D5D,0x021A, 0x0D61,0x02B6,
    0x0D66,0x0033, 0x0D6A,0x00AA, 0x0D6C,0x0009, 0x0D6D,0x00E6, 0x0D6D,0x011A,
    0x0D6D,0x0164, 0x0D6D,0x0184, 0x0D6D,0x01D2, 0x0D6D,0x021C, 0x0D6D,0x0264,
    0x0D6D,0x02BA, 0x0D6D,0x02FC, 0x0D71,0x0030, 0x0D72,0x01A1, 0x0D76,0x00AA,
    0x0D7A,0x0011, 0x0D7A,0x008B, 0x0D7A,0x00B3, 0x0D7A,0x00EF, 0x0D7A,0x00F7,
    0x0D7A,0x015B, 0x0D7A,0x015F, 0x0D7A,0x025B, 0x0D7A,0x0313, 0x0D7A,0x0323,
    0x0D7C,0x0005, 0x0D82,0x0011, 0x0D82,0x008B, 0x0D82,0x00EF, 0x0D82,0x00F7,
    0x0D82,0x015B, 0x0D82,0x015F, 0x0D82,0x0279, 0x0D86,0x0305, 0x0D89,0x021A,
    0x0D8D,0x0260, 0x0D8D,0x02F6, 0x0D96,0x002B, 0x0D96,0x0079, 0x0D98,0x0009,
    0x0D9C,0x000F, 0x0DA1,0x009E, 0x0DA6,0x002B, 0x0DA6,0x0079, 0x0DA9,0x0008,
    0x0DAD,0x0008, 0x0DB2,0x000F, 0x0DB6,0x0023, 0x0DB6,0x0028, 0x0DB6,0x0235,
    0x0DB6,0x02D3, 0x0DBA,0x0033, 0x0DBE,0x0009, 0x0DC1,0x0044, 0x0DC6,0x0033,
    0x0DCA,0x0009, 0x0DCA,0x004E, 0x0DCD,0x02B6, 0x0DD2,0x02ED, 0x0DD6,0x02ED,
    0x0DD9,0x021A, 0x0DDC,0x0009, 0x0DDD,0x00E6, 0x0DDD,0x011A, 0x0DDD,0x0164,
    0x0DDD,0x0184, 0x0DDD,0x01D2, 0x0DDD,0x021C, 0x0DDD,0x0264, 0x0DDD,0x02BA,
    0x0DDD,0x02FC, 0x0DE2,0x0023, 0x0DE2,0x0028, 0x0DE1,0x0028, 0x0DE2,0x0235,
    0x0DE4,0x0023, 0x0DE4,0x002B, 0x0DE6,0x0033, 0x0DE4,0x02D3, 0x0DE4,0x02D9,
    0x0DEA,0x0011, 0x0DEA,0x0013, 0x0DEA,0x0028, 0x0DEA,0x0159, 0x0DEC,0x0003,
    0x0DF0,0x00B7, 0x0DF1,0x0260, 0x0DF1,0x02F6, 0x0DF6,0x0011, 0x0DF6,0x0033,
    0x0DF5,0x00B6, 0x0DF6,0x0159, 0x0DF6,0x030D, 0x0DFA,0x0305, 0x0DFC,0x02ED,
    0x0E01,0x020E, 0x0E0E,0x0023, 0x0E11,0x0008, 0x0E15,0x02B0, 0x0E1A,0x0009,
    0x0E1E,0x02ED, 0x0E22,0x02ED, 0x0E25,0x0008, 0x0E29,0x0004, 0x0E30,0x000F,
    0x0E30,0x0021, 0x0E30,0x002B, 0x0E30,0x0087, 0x0E30,0x0281, 0x0E35,0x0002,
    0x0E3A,0x00F5, 0x0E3E,0x002B, 0x0E3E,0x0189, 0x0E3E,0x01BB, 0x0E40,0x002B,
    0x0E44,0x0005, 0x0E48,0x0003, 0x0E52,0x0033, 0x0E52,0x00E1, 0x0E5A,0x0033,
    0x0E5A,0x00E1, 0x0E62,0x02ED, 0x0E65,0x009E, 0x0E6A,0x0033, 0x0E6A,0x00E1,
    0x0E6E,0x0033, 0x0E6E,0x00E1, 0x0E71,0x0002, 0x0E75,0x0260, 0x0E75,0x02F6,
    0x0E79,0x021A, 0x0E7D,0x02B6, 0x0E80,0x0013, 0x0E81,0x0086, 0x0E85,0x0012,
    0x0E89,0x0008, 0x0E8D,0x017E, 0x0000,0x0000
};


void Contest_PreComputeStructure( int limit )
{
    Abc_Start();
    Rwr_Man_t * p = Contest_Rwr_ManStart( 0, limit );
    Rwr_ManStop(p);
    Abc_Stop();
}


Rwr_Man_t * Contest_Rwr_ManStart( int  fPrecompute, int limit )
{
    Dec_Man_t * pManDec;
    Rwr_Man_t * p;
    // abctime clk = Abc_Clock();
    // clk = Abc_Clock();
    p = ABC_ALLOC( Rwr_Man_t, 1 );
    memset( p, 0, sizeof(Rwr_Man_t) );
    p->nFuncs = (1<<16);
    pManDec   = (Dec_Man_t *)Abc_FrameReadManDec();
    p->puCanons = pManDec->puCanons;
    p->pPhases  = pManDec->pPhases;
    p->pPerms   = pManDec->pPerms;
    p->pMap     = pManDec->pMap;
    // initialize practical NPN classes
    p->pPractical  = Rwr_ManGetPractical( p );
    // create the table
    p->pTable = ABC_ALLOC( Rwr_Node_t *, p->nFuncs );
    memset( p->pTable, 0, sizeof(Rwr_Node_t *) * p->nFuncs );
    // create the elementary nodes
    p->pMmNode  = Extra_MmFixedStart( sizeof(Rwr_Node_t) );
    p->vForest  = Vec_PtrAlloc( 100 );
    Rwr_ManAddVar( p, 0x0000, fPrecompute ); // constant 0
    Rwr_ManAddVar( p, 0xAAAA, fPrecompute ); // var A
    Rwr_ManAddVar( p, 0xCCCC, fPrecompute ); // var B
    Rwr_ManAddVar( p, 0xF0F0, fPrecompute ); // var C
    Rwr_ManAddVar( p, 0xFF00, fPrecompute ); // var D
    p->nClasses = 5;
    // other stuff
    p->nTravIds   = 1;
    p->pPerms4    = Extra_Permutations( 4 );
    p->vLevNums   = Vec_IntAlloc( 50 );
    p->vFanins    = Vec_PtrAlloc( 50 );
    p->vFaninsCur = Vec_PtrAlloc( 50 );
    p->vNodesTemp = Vec_PtrAlloc( 50 );
    if ( fPrecompute )
    {   // precompute subgraphs
        Contest_Rwr_ManPrecompute( p, limit );
        // Rwr_ManPrint( p );
        Rwr_ManWriteToArray( p );
    }
    else
    {   // load saved subgraphs
        Contest_Rwr_ManLoadFromArray( p, 1 );
        //        Rwr_ManPrint( p );
        Rwr_ManPreprocess( p );
    }
    // p->timeStart = Abc_Clock() - clk;
    return p;
}


void Contest_Rwr_ManPrecompute( Rwr_Man_t * p, int limit )
{
    Rwr_Node_t * p0, * p1;
    int i, k, Level, Volume;
    int LevelOld = -1;
    int nNodes;

    Vec_PtrForEachEntryStart( Rwr_Node_t *, p->vForest, p0, i, 1 ) {
        Vec_PtrForEachEntryStart( Rwr_Node_t *, p->vForest, p1, k, 1 )
        {
            if ( LevelOld < (int)p0->Level )
            {
                LevelOld = p0->Level;
                printf( "Starting level %d  (at %d nodes).\n", LevelOld+1, i );
                printf( "Considered = %5d M.   Found = %8d.   Classes = %6d.   Trying %7d.\n",
                    p->nConsidered/1000000, p->vForest->nSize, p->nClasses, i );
            }

            if ( k == i )
                break;
            //        if ( p0->Level + p1->Level > 6 ) // hard
            //            break;

            if ( p0->Level + p1->Level > 5 ) // easy
                break;

            //        if ( p0->Level + p1->Level > 6 || (p0->Level == 3 && p1->Level == 3) )
            //            break;

            // compute the level and volume of the new nodes
            Level  = 1 + Abc_MaxInt( p0->Level, p1->Level );
            Volume = 1 + Rwr_ManNodeVolume( p, p0, p1 );
            // try four different AND nodes
            Contest_Rwr_ManTryNode( p,         p0 ,         p1 , 0, Level, Volume, limit );
            Contest_Rwr_ManTryNode( p, Rwr_Not(p0),         p1 , 0, Level, Volume, limit );
            Contest_Rwr_ManTryNode( p,         p0 , Rwr_Not(p1), 0, Level, Volume, limit );
            Contest_Rwr_ManTryNode( p, Rwr_Not(p0), Rwr_Not(p1), 0, Level, Volume, limit );
            // try EXOR
            Contest_Rwr_ManTryNode( p,         p0 ,         p1 , 1, Level, Volume + 1, limit );
            // report the progress
            if ( p->nConsidered % 50000000 == 0 )
                printf( "Considered = %5d M.   Found = %8d.   Classes = %6d.   Trying %7d.\n",
                    p->nConsidered/1000000, p->vForest->nSize, p->nClasses, i );
            // quit after some time
            if ( p->vForest->nSize == RWR_LIMIT + 5 )
            {
                printf( "Considered = %5d M.   Found = %8d.   Classes = %6d.   Trying %7d.\n",
                    p->nConsidered/1000000, p->vForest->nSize, p->nClasses, i );
                goto save;
            }
        }
    }
    save :

    // mark the relevant ones
    Rwr_ManIncTravId( p );
    k = 5;
    nNodes = 0;
    Vec_PtrForEachEntryStart( Rwr_Node_t *, p->vForest, p0, i, 5 )
        if ( p0->uTruth == p->puCanons[p0->uTruth] )
        {
            Rwr_MarkUsed_rec( p, p0 );
            nNodes++;
        }

    // compact the array by throwing away non-canonical
    k = 5;
    Vec_PtrForEachEntryStart( Rwr_Node_t *, p->vForest, p0, i, 5 )
        if ( p0->fUsed )
        {
            p->vForest->pArray[k] = p0;
            p0->Id = k++;
        }
    p->vForest->nSize = k;
    printf( "Total canonical = %4d. Total used = %5d.\n", nNodes, p->vForest->nSize );
}


Rwr_Node_t * Contest_Rwr_ManTryNode( Rwr_Man_t * p, Rwr_Node_t * p0, Rwr_Node_t * p1, int fExor, int Level, int Volume, int limit )
{
    Rwr_Node_t * pOld, * pNew, ** ppPlace;
    unsigned uTruth;
    // compute truth table, level, volume
    p->nConsidered++;
    if ( fExor )
    {
//        printf( "Considering EXOR of %d and %d.\n", p0->Id, p1->Id );
        uTruth = (p0->uTruth ^ p1->uTruth);
    }
    else
        uTruth = (Rwr_IsComplement(p0)? ~Rwr_Regular(p0)->uTruth : Rwr_Regular(p0)->uTruth) &
                 (Rwr_IsComplement(p1)? ~Rwr_Regular(p1)->uTruth : Rwr_Regular(p1)->uTruth) & 0xFFFF;
    // skip non-practical classes
    if ( Level > 2 && !p->pPractical[p->puCanons[uTruth]] )
        return NULL;
    // enumerate through the nodes with the same canonical form
    ppPlace = p->pTable + uTruth;
    for ( pOld = *ppPlace; pOld; ppPlace = &pOld->pNext, pOld = pOld->pNext )
    {
        if ( pOld->Level <  (unsigned)Level && pOld->Volume < (unsigned)Volume )
            return NULL;
        if ( pOld->Level == (unsigned)Level && pOld->Volume < (unsigned)Volume )
            return NULL;
    }

    // check whether satisfy maximum fanout limitation
    // if ( !Contest_CheckLimit( p0, p1, limit ) )
    //     return NULL;

    // count the classes
    if ( p->pTable[uTruth] == NULL && p->puCanons[uTruth] == uTruth )
        p->nClasses++;
    // create the new node
    pNew = (Rwr_Node_t *)Extra_MmFixedEntryFetch( p->pMmNode );
    pNew->Id     = p->vForest->nSize;
    pNew->TravId = 0;
    pNew->uTruth = uTruth;
    pNew->Level  = Level;
    pNew->Volume = Volume;
    pNew->fUsed  = 0;
    pNew->fExor  = fExor;
    pNew->p0     = p0;
    pNew->p1     = p1;
    pNew->pNext  = NULL;
    Vec_PtrPush( p->vForest, pNew );
    *ppPlace     = pNew;
    return pNew;
}


bool Contest_CheckLimit( Rwr_Node_t * p0, Rwr_Node_t * p1, int limit )
{
    if ( p0 == nullptr || p1 == nullptr )
        return false;
    unordered_map < int, int > rwrNode2FO;
    rwrNode2FO[p0->Id] = rwrNode2FO[p1->Id] = 1;
    bool isValid = true;
    Contest_CheckLimit_Rec( p0, rwrNode2FO, limit, isValid );
    if ( !isValid )
        return false;
    Contest_CheckLimit_Rec( p1, rwrNode2FO, limit, isValid );
    return isValid;
}


void Contest_CheckLimit_Rec( Rwr_Node_t * pNode, unordered_map < int, int > & rwrNode2FO, int limit, bool & isValid )
{
    if ( !isValid || pNode == nullptr )
        return;

    unordered_map < int, int >::iterator it = rwrNode2FO.find( pNode->Id );
    // if visited
    if ( it != rwrNode2FO.end() ) {
        if ( (++it->second) > limit )
            isValid = false;
        return;
    }
    // if not visited
    else {
        rwrNode2FO[ pNode->Id ] = 1;
        Contest_CheckLimit_Rec( pNode->p0, rwrNode2FO, limit, isValid );
        Contest_CheckLimit_Rec( pNode->p1, rwrNode2FO, limit, isValid );
    }
}


void Contest_Rwr_ManLoadFromArray( Rwr_Man_t * p, int fVerbose )
{
    unsigned short * pArray = s_RwtAigSubgraphs_Limit2;
    Rwr_Node_t * p0, * p1;
    unsigned Entry0, Entry1;
    int Level, Volume, nEntries, fExor;
    int i;
    // abctime clk = Abc_Clock();

    // reconstruct the forest
    for ( i = 0; ; i++ )
    {
        Entry0 = pArray[2*i + 0];
        Entry1 = pArray[2*i + 1];
        if ( Entry0 == 0 && Entry1 == 0 )
            break;
        // get EXOR flag
        fExor = (Entry0 & 1);
        Entry0 >>= 1;
        // get the nodes
        p0 = (Rwr_Node_t *)p->vForest->pArray[Entry0 >> 1];
        p1 = (Rwr_Node_t *)p->vForest->pArray[Entry1 >> 1];
        // compute the level and volume of the new nodes
        Level  = 1 + Abc_MaxInt( p0->Level, p1->Level );
        Volume = 1 + Rwr_ManNodeVolume( p, p0, p1 );
        // set the complemented attributes
        p0 = Rwr_NotCond( p0, (Entry0 & 1) );
        p1 = Rwr_NotCond( p1, (Entry1 & 1) );
        // add the node
//        Rwr_ManTryNode( p, p0, p1, Level, Volume );
        Rwr_ManAddNode( p, p0, p1, fExor, Level, Volume + fExor );
    }
    nEntries = i - 1;
    if ( fVerbose )
    {
        printf( "The number of classes = %d. Canonical nodes = %d.\n", p->nClasses, p->nAdded );
        printf( "The number of nodes loaded = %d.  ", nEntries );  // ABC_PRT( "Loading", Abc_Clock() - clk );
    }
}


int Contest_NtkRewrite( Abc_Ntk_t * pNtk, int fUpdateLevel, int fUseZeros, int fVerbose, int fVeryVerbose, int fPlaceEnable, int limit )
{
    // extern void           Dec_GraphUpdateNetwork( Abc_Obj_t * pRoot, Dec_Graph_t * pGraph, int fUpdateLevel, int nGain );
    // ProgressBar * pProgress;
    Cut_Man_t * pManCut;
    Rwr_Man_t * pManRwr;
    Abc_Obj_t * pNode;
//    Vec_Ptr_t * vAddedCells = NULL, * vUpdatedNets = NULL;
    Dec_Graph_t * pGraph;
    int i, nNodes, nGain, fCompl;
    // abctime clk, clkStart = Abc_Clock();

    assert( Abc_NtkIsStrash(pNtk) );
    // cleanup the AIG
    Abc_AigCleanup((Abc_Aig_t *)pNtk->pManFunc);

    // start the rewriting manager
    pManRwr = Contest_Rwr_ManStart( 0, 2 );
    if ( pManRwr == NULL )
        return 0;
    // compute the reverse levels if level update is requested
    if ( fUpdateLevel )
        Abc_NtkStartReverseLevels( pNtk, 0 );
    // start the cut manager
// clk = Abc_Clock();
    pManCut = Abc_NtkStartCutManForRewrite( pNtk );
// Rwr_ManAddTimeCuts( pManRwr, Abc_Clock() - clk );
    pNtk->pManCut = pManCut;

    if ( fVeryVerbose )
        Rwr_ScoresClean( pManRwr );

    // resynthesize each node once
    pManRwr->nNodesBeg = Abc_NtkNodeNum(pNtk);
    nNodes = Abc_NtkObjNumMax(pNtk);
    // pProgress = Extra_ProgressBarStart( stdout, nNodes );
    Abc_NtkForEachNode( pNtk, pNode, i )
    {
        // Extra_ProgressBarUpdate( pProgress, i, NULL );
        // stop if all nodes have been tried once
        if ( i >= nNodes )
            break;
        // skip persistant nodes
        if ( Abc_NodeIsPersistant(pNode) )
            continue;
        // skip the nodes with many fanouts
        if ( Abc_ObjFanoutNum(pNode) > 1000 )
            continue;

        // check TFI fanout constraints
        bool isExceed = false;
        Abc_NtkLevel( pNode->pNtk );
        if ( pNode->Level > 5 )
            Contest_CheckTFILimit_rec( pNode, pNode->Level - 1, limit, isExceed );
        else
            Contest_CheckTFILimit_rec( pNode, 0, limit, isExceed );
        // for each cut, try to resynthesize it
        nGain = Contest_NodeRewrite( pManRwr, pManCut, pNode, fUpdateLevel, fUseZeros, fPlaceEnable, isExceed );
        if ( !( nGain > 0 || (nGain == 0 && fUseZeros) || (isExceed && nGain != -INT_MAX) ) )
            continue;
        // if we end up here, a rewriting step is accepted

        // get hold of the new subgraph to be added to the AIG
        pGraph = (Dec_Graph_t *)Rwr_ManReadDecs(pManRwr);
        fCompl = Rwr_ManReadCompl(pManRwr);

        // reset the array of the changed nodes
        if ( fPlaceEnable )
            Abc_AigUpdateReset( (Abc_Aig_t *)pNtk->pManFunc );

        // complement the FF if needed
        if ( fCompl ) Dec_GraphComplement( pGraph );
// clk = Abc_Clock();
        Dec_GraphUpdateNetwork( pNode, pGraph, fUpdateLevel, nGain );
// Rwr_ManAddTimeUpdate( pManRwr, Abc_Clock() - clk );
        if ( fCompl ) Dec_GraphComplement( pGraph );

        // use the array of changed nodes to update placement
//        if ( fPlaceEnable )
//            Abc_PlaceUpdate( vAddedCells, vUpdatedNets );
    }
    // Extra_ProgressBarStop( pProgress );
// Rwr_ManAddTimeTotal( pManRwr, Abc_Clock() - clkStart );
    // print stats
    pManRwr->nNodesEnd = Abc_NtkNodeNum(pNtk);
    if ( fVerbose )
        Rwr_ManPrintStats( pManRwr );
//        Rwr_ManPrintStatsFile( pManRwr );
    // if ( fVeryVerbose )
    //     Rwr_ScoresReport( pManRwr );
    // delete the managers
    Rwr_ManStop( pManRwr );
    Cut_ManStop( pManCut );
    pNtk->pManCut = NULL;

    // start placement package
//    if ( fPlaceEnable )
//    {
//        Abc_PlaceEnd( pNtk );
//        Abc_AigUpdateStop( pNtk->pManFunc );
//    }

    // put the nodes into the DFS order and reassign their IDs
    {
//        abctime clk = Abc_Clock();
    Abc_NtkReassignIds( pNtk );
//        ABC_PRT( "time", Abc_Clock() - clk );
    }
//    Abc_AigCheckFaninOrder( pNtk->pManFunc );
    // fix the levels
    if ( fUpdateLevel )
        Abc_NtkStopReverseLevels( pNtk );
    else
        Abc_NtkLevel( pNtk );
    // check
    if ( !Abc_NtkCheck( pNtk ) )
    {
        printf( "Abc_NtkRewrite: The network check has failed.\n" );
        return 0;
    }
    return 1;
}


int Contest_NodeRewrite( Rwr_Man_t * p, Cut_Man_t * pManCut, Abc_Obj_t * pNode, int fUpdateLevel, int fUseZeros, int fPlaceEnable, bool isForced )
{
    int fVeryVerbose = 0;
    Dec_Graph_t * pGraph;
    Cut_Cut_t * pCut;
    Abc_Obj_t * pFanin;
    unsigned uPhase;
    unsigned uTruthBest = 0; // Suppress "might be used uninitialized"
    unsigned uTruth;
    char * pPerm;
    int Required, nNodesSaved;
    int nNodesSaveCur = -INT_MAX; // Suppress "might be used uninitialized"
    int i, GainCur = -INT_MAX, GainBest = -INT_MAX;

    p->nNodesConsidered++;
    // get the required times
    Required = fUpdateLevel? Abc_ObjRequiredLevel(pNode) : ABC_INFINITY;

    // get the node's cuts
    pCut = (Cut_Cut_t *)Abc_NodeGetCutsRecursive( pManCut, pNode, 0, 0 );
    assert( pCut != NULL );

    // go through the cuts
    for ( pCut = pCut->pNext; pCut; pCut = pCut->pNext )
    {
        // consider only 4-input cuts
        if ( pCut->nLeaves < 4 )
            continue;

        // get the fanin permutation
        uTruth = 0xFFFF & *Cut_CutReadTruth(pCut);
        pPerm = p->pPerms4[ (int)p->pPerms[uTruth] ];
        uPhase = p->pPhases[uTruth];
        // collect fanins with the corresponding permutation/phase
        Vec_PtrClear( p->vFaninsCur );
        Vec_PtrFill( p->vFaninsCur, (int)pCut->nLeaves, 0 );
        for ( i = 0; i < (int)pCut->nLeaves; i++ )
        {
            pFanin = Abc_NtkObj( pNode->pNtk, pCut->pLeaves[(int)pPerm[i]] );
            if ( pFanin == NULL )
                break;
            pFanin = Abc_ObjNotCond(pFanin, ((uPhase & (1<<i)) > 0) );
            Vec_PtrWriteEntry( p->vFaninsCur, i, pFanin );
        }
        if ( i != (int)pCut->nLeaves )
        {
            p->nCutsBad++;
            continue;
        }
        p->nCutsGood++;

        {
            int Counter = 0;
            Vec_PtrForEachEntry( Abc_Obj_t *, p->vFaninsCur, pFanin, i )
                if ( Abc_ObjFanoutNum(Abc_ObjRegular(pFanin)) == 1 )
                    Counter++;
            if ( Counter > 2 )
                continue;
        }

        // mark the fanin boundary
        Vec_PtrForEachEntry( Abc_Obj_t *, p->vFaninsCur, pFanin, i )
            Abc_ObjRegular(pFanin)->vFanouts.nSize++;

        // label MFFC with current ID
        Abc_NtkIncrementTravId( pNode->pNtk );
        nNodesSaved = Abc_NodeMffcLabelAig( pNode );
        // unmark the fanin boundary
        Vec_PtrForEachEntry( Abc_Obj_t *, p->vFaninsCur, pFanin, i )
            Abc_ObjRegular(pFanin)->vFanouts.nSize--;

        // evaluate the cut
        pGraph = Contest_CutEvaluate( p, pNode, pCut, p->vFaninsCur, nNodesSaved, Required, &GainCur, fPlaceEnable, isForced );

        // check if the cut is better than the current best one
        if ( pGraph != NULL && GainBest < GainCur )
        {
            // save this form
            nNodesSaveCur = nNodesSaved;
            GainBest  = GainCur;
            p->pGraph  = pGraph;
            p->fCompl = ((uPhase & (1<<4)) > 0);
            uTruthBest = 0xFFFF & *Cut_CutReadTruth(pCut);
            // collect fanins in the
            Vec_PtrClear( p->vFanins );
            Vec_PtrForEachEntry( Abc_Obj_t *, p->vFaninsCur, pFanin, i )
                Vec_PtrPush( p->vFanins, pFanin );
        }
    }

    if ( GainBest == -INT_MAX )
        return -INT_MAX;
    // copy the leaves
    Vec_PtrForEachEntry( Abc_Obj_t *, p->vFanins, pFanin, i )
        Dec_GraphNode((Dec_Graph_t *)p->pGraph, i)->pFunc = pFanin;
    p->nScores[p->pMap[uTruthBest]]++;
    p->nNodesGained += GainBest;
    if ( fUseZeros || GainBest > 0 )
    {
        p->nNodesRewritten++;
    }

    // report the progress
    if ( fVeryVerbose && GainBest > 0 )
    {
        printf( "Node %6s :   ", Abc_ObjName(pNode) );
        printf( "Fanins = %d. ", p->vFanins->nSize );
        printf( "Save = %d.  ", nNodesSaveCur );
        printf( "Add = %d.  ",  nNodesSaveCur-GainBest );
        printf( "GAIN = %d.  ", GainBest );
        printf( "Cone = %d.  ", p->pGraph? Dec_GraphNodeNum((Dec_Graph_t *)p->pGraph) : 0 );
        printf( "Class = %d.  ", p->pMap[uTruthBest] );
        printf( "\n" );
    }
    return GainBest;
}


Dec_Graph_t * Contest_CutEvaluate( Rwr_Man_t * p, Abc_Obj_t * pRoot, Cut_Cut_t * pCut, Vec_Ptr_t * vFaninsCur, int nNodesSaved, int LevelMax, int * pGainBest, int fPlaceEnable, bool isForced )
{
    Vec_Ptr_t * vSubgraphs;
    Dec_Graph_t * pGraphBest = NULL; // Suppress "might be used uninitialized"
    Dec_Graph_t * pGraphCur;
    Rwr_Node_t * pNode, * pFanin;
    int nNodesAdded, GainBest, i, k;
    unsigned uTruth;
    // find the matching class of subgraphs
    uTruth = 0xFFFF & *Cut_CutReadTruth(pCut);
    vSubgraphs = Vec_VecEntry( p->vClasses, p->pMap[uTruth] );
    p->nSubgraphs += vSubgraphs->nSize;
    // determine the best subgraph
    GainBest = -INT_MAX;
    Vec_PtrForEachEntry( Rwr_Node_t *, vSubgraphs, pNode, i )
    {
        // get the current graph
        pGraphCur = (Dec_Graph_t *)pNode->pNext;
        // copy the leaves
        Vec_PtrForEachEntry( Rwr_Node_t *, vFaninsCur, pFanin, k )
            Dec_GraphNode(pGraphCur, k)->pFunc = pFanin;
        // detect how many unlabeled nodes will be reused
        nNodesAdded = Contest_GraphToNetworkCount( pRoot, pGraphCur, nNodesSaved, LevelMax, isForced );
        if ( nNodesAdded == -INT_MAX )
            continue;
        if ( !isForced )
            assert( nNodesSaved >= nNodesAdded );

        {
            // count the gain at this node
            if ( GainBest < nNodesSaved - nNodesAdded )
            {
                GainBest   = nNodesSaved - nNodesAdded;
                pGraphBest = pGraphCur;

                // score the graph
                // if ( nNodesSaved - nNodesAdded > 0 )
                {
                    pNode->nScore++;
                    pNode->nGain += GainBest;
                    pNode->nAdded += nNodesAdded;
                }
            }
        }
    }
    // if ( GainBest == -1 )
    if ( GainBest == -INT_MAX )
        return NULL;
    *pGainBest = GainBest;
    return pGraphBest;
}


int Contest_GraphToNetworkCount( Abc_Obj_t * pRoot, Dec_Graph_t * pGraph, int NodeMax, int LevelMax, bool isForced )
{
    Abc_Aig_t * pMan = (Abc_Aig_t *)pRoot->pNtk->pManFunc;
    Dec_Node_t * pNode, * pNode0, * pNode1;
    Abc_Obj_t * pAnd, * pAnd0, * pAnd1;
    int i, Counter, LevelNew;//, LevelOld;
    // check for constant function or a literal
    if ( Dec_GraphIsConst(pGraph) || Dec_GraphIsVar(pGraph) )
        return 0;
    // set the levels of the leaves
    Dec_GraphForEachLeaf( pGraph, pNode, i )
        pNode->Level = Abc_ObjRegular((Abc_Obj_t *)pNode->pFunc)->Level;
    // compute the AIG size after adding the internal nodes
    Counter = 0;
    Dec_GraphForEachNode( pGraph, pNode, i )
    {
        // get the children of this node
        pNode0 = Dec_GraphNode( pGraph, pNode->eEdge0.Node );
        pNode1 = Dec_GraphNode( pGraph, pNode->eEdge1.Node );
        // get the AIG nodes corresponding to the children
        pAnd0 = (Abc_Obj_t *)pNode0->pFunc;
        pAnd1 = (Abc_Obj_t *)pNode1->pFunc;
        if ( pAnd0 && pAnd1 )
        {
            // if they are both present, find the resulting node
            pAnd0 = Abc_ObjNotCond( pAnd0, pNode->eEdge0.fCompl );
            pAnd1 = Abc_ObjNotCond( pAnd1, pNode->eEdge1.fCompl );
            pAnd  = Abc_AigAndLookup( pMan, pAnd0, pAnd1 );
            // return -1 if the node is the same as the original root
            if ( Abc_ObjRegular(pAnd) == pRoot )
                return -INT_MAX;
        }
        else
            pAnd = NULL;
        // count the number of added nodes
        if ( pAnd == NULL || Abc_NodeIsTravIdCurrent(Abc_ObjRegular(pAnd)) )
        {
            if ( !isForced && ++Counter > NodeMax )
                return -INT_MAX;
        }
        // count the number of new levels
        LevelNew = 1 + Abc_MaxInt( pNode0->Level, pNode1->Level );
        if ( pAnd )
        {
            if ( Abc_ObjRegular(pAnd) == Abc_AigConst1(pRoot->pNtk) )
                LevelNew = 0;
            else if ( Abc_ObjRegular(pAnd) == Abc_ObjRegular(pAnd0) )
                LevelNew = (int)Abc_ObjRegular(pAnd0)->Level;
            else if ( Abc_ObjRegular(pAnd) == Abc_ObjRegular(pAnd1) )
                LevelNew = (int)Abc_ObjRegular(pAnd1)->Level;
            // LevelOld = (int)Abc_ObjRegular(pAnd)->Level;
//            assert( LevelNew == LevelOld );
        }
        // if ( !isForced && LevelNew > LevelMax )
        if ( LevelNew > LevelMax )
            return -INT_MAX;
        pNode->pFunc = pAnd;
        pNode->Level = LevelNew;
    }
    return Counter;
}


void Contest_CheckTFILimit_rec( Abc_Obj_t * pObj, unsigned minLevel, int limit, bool & isExceed )
{
    if ( isExceed )
        return;
    if ( Abc_ObjIsCi( pObj ) )
        return;
    if ( minLevel >= 0 && minLevel > ((int)(pObj->Level)) ) {
        return;
    }
    if ( Abc_ObjFanoutNum( pObj ) > limit ) {
        isExceed = true;
        return;
    }
    Abc_Obj_t * pFanin;
    int i;
    Abc_ObjForEachFanin( pObj, pFanin, i )
        Contest_CheckTFILimit_rec( pFanin, minLevel, limit, isExceed );
}
